from utils import getFlatList, flattenLists, assertTypedef test_asserttype():    listvals = ["1", "2"]    aval = assertType(listvals, str)    assert aval is True, f"assertType did not return True for [{listvals}]"    listvals = [1, "2"]    aval = assertType(listvals, str)    assert aval is False, f"assertType did not return False for [{listvals}]"    listvals = [1, 2]    aval = assertType(listvals, int)    assert aval is True, f"assertType did not return True for [{listvals}]"def test_getflatlist():    listvals = [[1, 2], [3, 4]]    retval = getFlatList(listvals)    assert len(retval) == 4, f"getFlatList did not return a list of len 4 for [{listvals}]"    listvals = [[1, 2], [3, 4], [[5, 6]]]    retval = getFlatList(listvals)    assert len(retval) == 5, f"getFlatList did not return a list of len 5 for [{listvals}]"def test_flattenlists():    listvals = [[1, 2], [3, 4]]    retval = flattenLists(listvals)    assert len(retval) == 4, f"flattenLists did not return a list of len 4 for [{listvals}]"    listvals = [[1, 2], [1, 2]]    retval = flattenLists(listvals, unique=True)    assert len(retval) == 2, f"flattenLists did not return a list of len 2 for [{listvals}]"    listvals = [[1, 2], [None, 4]]    retval = flattenLists(listvals, rmNa=True)    assert len(retval) == 3, f"flattenLists did not return a list of len 3 for [{listvals}]"    listvals = [[1, 2], [1, None, 4, 2]]    retval = flattenLists(listvals, rmNa=True, unique=True)    assert len(retval) == 3, f"flattenLists did not return a list of len 3 for [{listvals}]"if __name__ == "main":    test_asserttype()    test_getflatlist()    test_flattenlists()    